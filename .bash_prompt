function is_on_git() {
  git rev-parse 2> /dev/null
}

function get_git_branch() {
  # On branches, this will return the branch name
  # On non-branches, (no branch)
  REF="$(git symbolic-ref HEAD 2> /dev/null | sed -e 's/refs\/heads\///')"
  if [[ $REF != "" ]]; then
    echo $REF
  else
    echo ""
  fi
}

parse_git_dirty () {
  # ?? file.txt # Unstaged new files
  # A  file.txt # Staged new files
  #  M file.txt # Unstaged modified files
  # M  file.txt # Staged modified files
  #  D file.txt # Unstaged deleted files
  # D  file.txt # Staged deleted files

  # If the git status has *any* changes (i.e. dirty)
  # [[ -z "$(git status --porcelain 2> /dev/null)" ]]
  git status --porcelain 2> /dev/null | wc -l
}

function get_git_status() {
  # Grab the git dirty and git behind
  BRANCH_AHEAD="$(parse_git_ahead)"
  BRANCH_BEHIND="$(parse_git_behind)"

  # Iterate through all the cases and if it matches, then echo
  if [[ $BRANCH_AHEAD == 1 && $BRANCH_BEHIND == 1 ]]; then
    echo "◊"
    # Alt in case the previous looks bad.
    # echo "▲▼"
  elif [[ $BRANCH_AHEAD == 1 ]]; then
    echo "▲"
  elif [[ $BRANCH_BEHIND == 1 ]]; then
    echo "▼"
  fi
}

branch_exists () {
  # List remote branches           | # Find our branch and exit with 0 or 1 if found/not found
  git branch --remote 2> /dev/null | grep --quiet "$1"
}

parse_git_ahead () {
  # Grab the local and remote branch
  BRANCH="$(get_git_branch)"
  REMOTE_BRANCH=origin/"$BRANCH"

  # If the remote branch is behind the local branch
  # or it has not been merged into origin (remote branch doesn't exist)
  if (is_branch1_behind_branch2 "$REMOTE_BRANCH" "$BRANCH" ||
      ! branch_exists "$REMOTE_BRANCH"); then
    # echo our character
    echo 1
  fi
}

is_branch1_behind_branch2 () {
  # Find the first log (if any) that is in branch1 but not branch2
  FIRST_LOG="$(git log $1..$2 -1 2> /dev/null)"

  # Exit with 0 if there is a first log, 1 if there is not
  [[ -n $FIRST_LOG ]]
}

parse_git_behind () {
  # Grab the branch
  BRANCH="$(get_git_branch)"
  REMOTE_BRANCH=origin/"$BRANCH"

  # If the local branch is behind the remote branch
  if is_branch1_behind_branch2 "$BRANCH" "$REMOTE_BRANCH"; then
    # echo our character
    echo 1
  fi
}

COLOR=$'\e[0;36m'
gen_prompt()
{
    prompt_text=$(get_git_branch)
    if [[ -n $prompt_text ]]; then
        if [[ $(parse_git_dirty) > 0 ]]; then
            dirtycolor=$'\e[0;31m'
        else
            dirtycolor=$'\e[0;32m'
        fi
        status=$(get_git_status)
        prompt_text="($prompt_text$status)"
    else
        prompt_text=''
    fi

    # RVM Prompt Info
    rvmcolor=$'\e[0;33m'
    if [ -e ~/.rvm/ ]; then
        RVM=$(~/.rvm/bin/rvm-prompt)
        if [[ -n $RVM ]]; then
            rvm_prompt="[$RVM]"
        else
            rvm_prompt=''
        fi
    fi
}

PROMPT_COMMAND=gen_prompt
PS1='\[$COLOR\]\w \[$rvmcolor\]\[$rvm_prompt\]\[$dirtycolor\]$prompt_text\[$COLOR\]\$\[\e[0m\] '

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac
